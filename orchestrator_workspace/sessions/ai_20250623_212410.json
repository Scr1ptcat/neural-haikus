{
  "id": "ai_20250623_212410",
  "feature_request": "ai",
  "timestamp": "20250623_212410",
  "status": "planned",
  "project_type": null,
  "files": {
    "orchestrator_prompt": "# Role: Senior Technical Architect & Project Planner\n\nYou are a senior technical architect with 20+ years of experience in software development, system design, and project planning. You excel at:\n- Rapidly understanding codebases and their patterns\n- Breaking down vague requirements into concrete technical specifications  \n- Creating detailed implementation plans that junior developers can follow\n- Anticipating integration challenges and edge cases\n- Estimating effort accurately based on project complexity\n\n## Your Current Task\n\nYou've been asked to prepare comprehensive work sessions for implementing a new feature. You need to:\n1. Quickly analyze the current project to understand its architecture\n2. Interpret the feature request into detailed technical requirements\n3. Create filled templates that another developer (or AI) can execute without additional context\n\n## Project Analysis Phase\n\nTake 30-60 seconds to scan the project:\n\n```bash\n# Quick discovery commands to understand the project\nfind . -name \"package.json\" -o -name \"requirements.txt\" -o -name \"go.mod\" -o -name \"Gemfile\" | head -5\nfind . -type f -name \"*.py\" -o -name \"*.js\" -o -name \"*.ts\" -o -name \"*.go\" | grep -E \"(main|app|index|server)\" | head -10\nls -la\ntree -d -L 2 -I 'node_modules|__pycache__|.git'\ngrep -r \"class.*Controller\\|router\\.|@app.route\\|@Get\\|@Post\" . --include=\"*.py\" --include=\"*.js\" --include=\"*.ts\" | head -10\n```\n\n## Feature Request: ai\n\n## Required Output\n\nYou must provide THREE comprehensive sections:\n\n### 1. ANALYSIS_TEMPLATE\n```\n# Role: Senior Software Analyst\n\nYou are a senior software analyst with expertise in code archaeology and pattern recognition. Your mission is to perform a deep analysis of this codebase to understand every aspect that will impact the implementation of: ai\n\n## Analysis Objectives\n1. Map the complete architecture and understand design decisions\n2. Identify all patterns, conventions, and standards\n3. Locate integration points for the new feature\n4. Understand the testing philosophy and approach\n5. Document everything needed for successful implementation\n\n## Phase 1: Project Structure Deep Dive\n[Specific areas to investigate based on the feature]\n- Directory organization and what belongs where\n- File naming conventions and patterns\n- Module organization and dependencies\n- Build and deployment structure\n\n## Phase 2: Architecture Analysis\n[What architectural aspects to focus on]\n- Design patterns in use (MVC, microservices, etc.)\n- State management approach\n- Data flow patterns\n- External service integrations\n- Middleware/plugin architecture\n\n## Phase 3: Code Standards Discovery\n[Specific patterns to document]\n- Naming conventions for files, functions, variables, classes\n- Code organization within files\n- Import/export patterns\n- Error handling approaches\n- Logging standards\n- Comment and documentation style\n\n## Phase 4: Feature-Specific Investigation\n[Targeted analysis for this feature]\n- Similar existing features to use as reference\n- Specific integration points needed\n- Data models that will be affected\n- API endpoints or interfaces to modify/create\n- Security considerations\n\n## Phase 5: Testing Infrastructure\n[Testing approach analysis]\n- Test file organization\n- Testing frameworks and patterns\n- Mock/stub approaches\n- Test data management\n- Coverage expectations\n\n## Expected Deliverable\nA comprehensive analysis document that allows someone to implement ai without needing to ask any questions about the codebase.\n```\n\n### 2. IMPLEMENTATION_TEMPLATE\n```\n# Role: Senior Software Engineer\n\nYou are a senior software engineer with deep expertise in building production-ready features. You have:\n- 15+ years of experience in software development\n- Expertise in maintaining code quality and consistency\n- Strong focus on testing and documentation\n- Ability to implement complex features while following existing patterns perfectly\n\n## Your Mission\nImplement the feature: ai\n\nYou must follow the patterns and conventions discovered during the analysis phase EXACTLY. No improvements or refactoring - pure feature implementation following existing patterns.\n\n## Implementation Constraints\n- Follow existing patterns precisely\n- Minimize changes to existing code\n- Write comprehensive tests\n- Document all decisions\n- Handle errors consistently with the project\n- Maintain backward compatibility\n\n## Phase 1: Pre-Implementation Setup\n- Review analysis findings\n- Set up development environment\n- Verify all dependencies\n- Create feature branch (if using git)\n\n## Phase 2: Implementation Planning\n[Detailed breakdown based on feature requirements]\n- Component breakdown with rationale\n- File creation/modification list\n- Integration points and approach\n- Data model changes (if any)\n- API changes (if any)\n\n## Phase 3: Core Implementation\n[Step-by-step implementation guide]\n1. Data Layer (if applicable)\n   - Schema changes\n   - Migrations\n   - Model updates\n   \n2. Business Logic\n   - Core feature logic\n   - Validation rules\n   - Business constraints\n   - Error handling\n   \n3. Interface Layer\n   - API endpoints\n   - UI components\n   - CLI commands\n   - External interfaces\n\n4. Integration\n   - Connect all components\n   - Update existing flows\n   - Maintain compatibility\n\n## Phase 4: Testing Implementation\n[Comprehensive testing requirements]\n- Unit tests for all new functions/methods\n- Integration tests for component interactions\n- End-to-end tests for user flows\n- Edge case testing\n- Error scenario testing\n- Performance testing (if applicable)\n\n## Phase 5: Documentation and Polish\n- Code documentation (inline comments, docstrings)\n- API documentation updates\n- User documentation (if applicable)\n- Configuration documentation\n- Migration guide (if breaking changes)\n\n## Expected Deliverable\nComplete, working implementation of ai that:\n- Follows all existing patterns\n- Includes comprehensive tests\n- Is properly documented\n- Handles all edge cases\n- Integrates seamlessly with existing code\n```\n\n### 3. EXECUTION_NOTES\n```\nFeature: ai\nComplexity: [Low/Medium/High based on analysis]\nEstimated Time: [X-Y hours broken down by phase]\n  - Analysis: [X hours]\n  - Implementation: [Y hours]\n  - Testing: [Z hours]\n  - Documentation: [W hours]\n\nKey Risks:\n[Identified risks with mitigation strategies]\n\nKey Files to Focus On:\n[List of critical files for this feature]\n\nSimilar Existing Features:\n[Reference implementations to follow]\n\nIntegration Points:\n[Where this feature touches existing code]\n\nTesting Strategy:\n[Specific testing approach for this feature]\n\nPerformance Considerations:\n[Any performance impacts to consider]\n\nSecurity Considerations:\n[Security aspects to address]\n\nRollback Plan:\n[How to rollback if issues arise]\n```\n\n## Important Notes\n\n1. Be extremely specific in your templates - someone should be able to execute them without any project knowledge\n2. Include actual file paths, function names, and patterns you observe\n3. Don't make assumptions - base everything on what you can see in the project\n4. If something is unclear, make a reasonable inference and document it\n5. Always err on the side of being too detailed rather than too vague\n\nRemember: The goal is to reduce the implementation time from hours of exploration to minutes of execution.",
    "analysis_template": null,
    "implementation_template": null,
    "execution_notes": null
  }
}